// This file was generated by counterfeiter
package fakes

import (
	"bytes"
	"sync"

	"github.com/cloudfoundry-incubator/route-registrar/commandrunner"
)

type FakeRunner struct {
	RunStub        func(outbuf, errbuff *bytes.Buffer) error
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		outbuf  *bytes.Buffer
		errbuff *bytes.Buffer
	}
	runReturns struct {
		result1 error
	}
	CommandErrorChannelStub        func() chan error
	commandErrorChannelMutex       sync.RWMutex
	commandErrorChannelArgsForCall []struct{}
	commandErrorChannelReturns     struct {
		result1 chan error
	}
	KillStub        func() error
	killMutex       sync.RWMutex
	killArgsForCall []struct{}
	killReturns     struct {
		result1 error
	}
}

func (fake *FakeRunner) Run(outbuf *bytes.Buffer, errbuff *bytes.Buffer) error {
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		outbuf  *bytes.Buffer
		errbuff *bytes.Buffer
	}{outbuf, errbuff})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(outbuf, errbuff)
	} else {
		return fake.runReturns.result1
	}
}

func (fake *FakeRunner) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeRunner) RunArgsForCall(i int) (*bytes.Buffer, *bytes.Buffer) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].outbuf, fake.runArgsForCall[i].errbuff
}

func (fake *FakeRunner) RunReturns(result1 error) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRunner) CommandErrorChannel() chan error {
	fake.commandErrorChannelMutex.Lock()
	fake.commandErrorChannelArgsForCall = append(fake.commandErrorChannelArgsForCall, struct{}{})
	fake.commandErrorChannelMutex.Unlock()
	if fake.CommandErrorChannelStub != nil {
		return fake.CommandErrorChannelStub()
	} else {
		return fake.commandErrorChannelReturns.result1
	}
}

func (fake *FakeRunner) CommandErrorChannelCallCount() int {
	fake.commandErrorChannelMutex.RLock()
	defer fake.commandErrorChannelMutex.RUnlock()
	return len(fake.commandErrorChannelArgsForCall)
}

func (fake *FakeRunner) CommandErrorChannelReturns(result1 chan error) {
	fake.CommandErrorChannelStub = nil
	fake.commandErrorChannelReturns = struct {
		result1 chan error
	}{result1}
}

func (fake *FakeRunner) Kill() error {
	fake.killMutex.Lock()
	fake.killArgsForCall = append(fake.killArgsForCall, struct{}{})
	fake.killMutex.Unlock()
	if fake.KillStub != nil {
		return fake.KillStub()
	} else {
		return fake.killReturns.result1
	}
}

func (fake *FakeRunner) KillCallCount() int {
	fake.killMutex.RLock()
	defer fake.killMutex.RUnlock()
	return len(fake.killArgsForCall)
}

func (fake *FakeRunner) KillReturns(result1 error) {
	fake.KillStub = nil
	fake.killReturns = struct {
		result1 error
	}{result1}
}

var _ commandrunner.Runner = new(FakeRunner)
